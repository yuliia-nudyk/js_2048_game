{"version":3,"sources":["scripts/main.js"],"names":["scores","document","querySelector","bestScores","button","cells","querySelectorAll","startMessage","winMessage","loseMessage","textContent","localStorage","getItem","addEventListener","classList","contains","remove","add","forEach","cell","filledCheck","children","addCard","move","emptyCells","filter","emptyCheck","maxIndex","length","randomIndex","Math","floor","random","randomNumber","newCard","createElement","append","style","transform","setTimeout","every","max","i","current","e","key","goDown","downMerge","sumCard","j","addedCard","steps","merge","downShift","newIndex","currentCard","shift","goUp","upMerge","upShift","goRight","rightMerge","min","rightShift","goLeft","leftMerge","leftShift","direction","sign","axis","movedCard","setItem"],"mappings":"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","file":"main.a1eebdb3.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst scores = document.querySelector('.game-score');\nconst bestScores = document.querySelector('.best-score');\nconst button = document.querySelector('.button');\nconst cells = document.querySelectorAll('.field-cell');\nconst startMessage = document.querySelector('.message-start');\nconst winMessage = document.querySelector('.message-win');\nconst loseMessage = document.querySelector('.message-lose');\n\nbestScores.textContent = localStorage.getItem('best') || 0;\n\nbutton.addEventListener('click', () => {\n  if (button.classList.contains('start')) {\n    button.classList.remove('start');\n    button.classList.add('restart');\n\n    button.textContent = 'Restart';\n\n    startMessage.classList.add('hidden');\n  } else {\n    [...cells].forEach(cell => {\n      if (filledCheck(cell)) {\n        cell.children[0].remove();\n      }\n    });\n\n    if (!winMessage.classList.contains('hidden')) {\n      winMessage.classList.add('hidden');\n    }\n\n    if (!loseMessage.classList.contains('hidden')) {\n      loseMessage.classList.add('hidden');\n    }\n\n    scores.textContent = 0;\n  }\n\n  addCard();\n  addCard();\n});\n\n// creating a variable 'move' to store any moves of cards\n// to understand is it necessary to add a new card;\nlet move = 0;\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.key) {\n    case 'ArrowDown':\n      goDown();\n      break;\n    case 'ArrowUp':\n      goUp();\n      break;\n    case 'ArrowRight':\n      goRight();\n      break;\n    case 'ArrowLeft':\n      goLeft();\n      break;\n  }\n\n  if (move > 0) {\n    setTimeout(() => {\n      addCard();\n      move = 0;\n    }, 150);\n  }\n\n  function goDown() {\n    downMerge();\n    downShift();\n\n    function downMerge() {\n      for (let i = (cells.length - 1); i >= 0; i--) {\n        if (filledCheck(cells[i])) {\n          const sumCard = cells[i].children[0];\n          const current = sumCard.textContent;\n\n          for (let j = (i - 4); j >= 0; j -= 4) {\n            if (filledCheck(cells[j])) {\n              const addedCard = cells[j].children[0];\n\n              if (addedCard.textContent === current) {\n                const steps = (i - j) / 4;\n\n                merge(sumCard, addedCard, current, steps, 'down');\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function downShift() {\n      for (let i = (cells.length - 1); i >= 0; i--) {\n        if (filledCheck(cells[i])) {\n          let newIndex;\n\n          for (let j = (i + 4); j < cells.length; j += 4) {\n            if (emptyCheck(cells[j])) {\n              newIndex = j;\n            } else {\n              break;\n            }\n          }\n\n          if (newIndex >= 0) {\n            const steps = (newIndex - i) / 4;\n            const currentCard = cells[i].children[0];\n\n            shift(currentCard, newIndex, steps, 'down');\n          }\n        }\n      }\n    }\n  }\n\n  function goUp() {\n    upMerge();\n    upShift();\n\n    function upMerge() {\n      for (let i = 0; i < cells.length; i++) {\n        if (filledCheck(cells[i])) {\n          const sumCard = cells[i].children[0];\n          const current = sumCard.textContent;\n\n          for (let j = (i + 4); j < cells.length; j += 4) {\n            if (filledCheck(cells[j])) {\n              const addedCard = cells[j].children[0];\n\n              if (addedCard.textContent === current) {\n                const steps = (j - i) / 4;\n\n                merge(sumCard, addedCard, current, steps, 'up');\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function upShift() {\n      for (let i = 0; i < cells.length; i++) {\n        if (filledCheck(cells[i])) {\n          let newIndex;\n\n          for (let j = (i - 4); j >= 0; j -= 4) {\n            if (emptyCheck(cells[j])) {\n              newIndex = j;\n            } else {\n              break;\n            }\n          }\n\n          if (newIndex >= 0) {\n            const steps = (i - newIndex) / 4;\n            const currentCard = cells[i].children[0];\n\n            shift(currentCard, newIndex, steps, 'up');\n          }\n        }\n      }\n    }\n  }\n\n  function goRight() {\n    rightMerge();\n    rightShift();\n\n    function rightMerge() {\n      let min = cells.length - 4;\n\n      for (let i = (cells.length - 1); i >= 0; i--) {\n        if (i < min) {\n          min -= 4;\n        }\n\n        if (filledCheck(cells[i])) {\n          const sumCard = cells[i].children[0];\n          const current = sumCard.textContent;\n\n          for (let j = (i - 1); j >= min; j--) {\n            if (filledCheck(cells[j])) {\n              const addedCard = cells[j].children[0];\n\n              if (addedCard.textContent === current) {\n                const steps = i - j;\n\n                merge(sumCard, addedCard, current, steps, 'right');\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function rightShift() {\n      let max = cells.length;\n\n      for (let i = (cells.length - 1); i >= 0; i--) {\n        if (i < (max - 4)) {\n          max -= 4;\n        }\n\n        if (filledCheck(cells[i])) {\n          let newIndex;\n\n          for (let j = (i + 1); j < max; j++) {\n            if (emptyCheck(cells[j])) {\n              newIndex = j;\n            } else {\n              break;\n            }\n          }\n\n          if (newIndex >= 0) {\n            const steps = newIndex - i;\n            const currentCard = cells[i].children[0];\n\n            shift(currentCard, newIndex, steps, 'right');\n          }\n        }\n      }\n    }\n  }\n\n  function goLeft() {\n    leftMerge();\n    leftShift();\n\n    function leftMerge() {\n      let max = 4;\n\n      for (let i = 0; i < cells.length; i++) {\n        if (i === max) {\n          max += 4;\n        }\n\n        if (filledCheck(cells[i])) {\n          const sumCard = cells[i].children[0];\n          const current = sumCard.textContent;\n\n          for (let j = (i + 1); j < max; j++) {\n            if (filledCheck(cells[j])) {\n              const addedCard = cells[j].children[0];\n\n              if (addedCard.textContent === current) {\n                const steps = j - i;\n\n                merge(sumCard, addedCard, current, steps, 'left');\n              }\n\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    function leftShift() {\n      let min = 0;\n\n      for (let i = 0; i < cells.length; i++) {\n        if (i === (min + 4)) {\n          min += 4;\n        }\n\n        if (filledCheck(cells[i])) {\n          let newIndex;\n\n          for (let j = (i - 1); j >= min; j--) {\n            if (emptyCheck(cells[j])) {\n              newIndex = j;\n            } else {\n              break;\n            }\n          }\n\n          if (newIndex >= 0) {\n            const steps = i - newIndex;\n            const currentCard = cells[i].children[0];\n\n            shift(currentCard, newIndex, steps, 'left');\n          }\n        }\n      }\n    }\n  }\n\n  function merge(sumCard, addedCard, current, steps, direction) {\n    let sign;\n    let axis;\n\n    switch (direction) {\n      case 'down':\n        sign = '-';\n        axis = 'Y';\n        break;\n      case 'up':\n        sign = '+';\n        axis = 'Y';\n        break;\n      case 'right':\n        sign = '-';\n        axis = 'X';\n        break;\n      case 'left':\n        sign = '+';\n        axis = 'X';\n        break;\n    }\n\n    sumCard.classList.remove(`field-cell__card--${current}`);\n\n    sumCard.classList.add(`field-cell__card--${current * 2}`);\n    sumCard.textContent = current * 2;\n\n    addedCard.remove();\n\n    const movedCard = document.createElement('div');\n\n    movedCard.classList.add('field-cell__moved-card');\n    movedCard.classList.add(`field-cell__moved-card--${current}`);\n    movedCard.textContent = current;\n\n    sumCard.append(movedCard);\n\n    movedCard.style.transform = `\n      translate${axis}(calc(${sign}${steps} * (100% + 10px)))\n    `;\n\n    setTimeout(() => {\n      movedCard.style.transform = `translateY(0)`;\n    }, 0);\n\n    setTimeout(() => {\n      movedCard.remove();\n      sumCard.style.transform = 'scale(1.1)';\n\n      setTimeout(() => {\n        sumCard.style.transform = 'scale(1.0)';\n      }, 150);\n    }, 150);\n\n    scores.textContent = +scores.textContent + current * 2;\n\n    if (scores.textContent > +bestScores.textContent) {\n      localStorage.setItem('best', scores.textContent);\n      bestScores.textContent = localStorage.getItem('best');\n    }\n\n    if ((current * 2) === 2048) {\n      winMessage.classList.remove('hidden');\n    }\n\n    move++;\n  }\n\n  function shift(currentCard, newIndex, steps, direction) {\n    let sign;\n    let axis;\n\n    switch (direction) {\n      case 'down':\n        sign = '-';\n        axis = 'Y';\n        break;\n      case 'up':\n        sign = '+';\n        axis = 'Y';\n        break;\n      case 'right':\n        sign = '-';\n        axis = 'X';\n        break;\n      case 'left':\n        sign = '+';\n        axis = 'X';\n        break;\n    }\n\n    currentCard.remove();\n\n    cells[newIndex].append(currentCard);\n\n    currentCard.style.transform = `\n      translate${axis}(calc(${sign}${steps} * (100% + 10px)))\n    `;\n\n    setTimeout(() => {\n      currentCard.style.transform = `translate${axis}(0)`;\n    }, 0);\n\n    move++;\n  }\n});\n\nfunction addCard() {\n  const emptyCells = [...cells].filter(cell => emptyCheck(cell));\n  const maxIndex = emptyCells.length;\n\n  const randomIndex = Math.floor(Math.random() * maxIndex);\n  const randomNumber = Math.floor(Math.random() * 10) + 1;\n\n  const newCard = document.createElement('div');\n\n  newCard.classList.add('field-cell__card');\n\n  if (randomNumber === 4) {\n    newCard.classList.add('field-cell__card--4');\n    newCard.textContent = 4;\n  } else {\n    newCard.classList.add('field-cell__card--2');\n    newCard.textContent = 2;\n  }\n\n  emptyCells[randomIndex].append(newCard);\n\n  newCard.style.transform = 'scale(0.5)';\n\n  setTimeout(() => {\n    newCard.style.transform = 'scale(1.0)';\n  }, 75);\n\n  // checking if is there any possible moves\n  // to discover whether the game is lost\n\n  if ([...cells].every(cell => filledCheck(cell))) {\n    move = 0;\n\n    let max = 4;\n\n    for (let i = 0; i < cells.length; i++) {\n      if (i === max) {\n        max += 4;\n      }\n\n      const current = cells[i].children[0].textContent;\n\n      if ((i + 1) < max) {\n        if (cells[i + 1].children[0].textContent === current) {\n          move++;\n          break;\n        }\n      }\n\n      if ((i + 4) < cells.length) {\n        if (cells[i + 4].children[0].textContent === current) {\n          move++;\n          break;\n        }\n      }\n    }\n\n    if (move === 0) {\n      if (!winMessage.classList.contains('hidden')) {\n        winMessage.classList.add('hidden');\n      }\n\n      loseMessage.classList.remove('hidden');\n    }\n  }\n}\n\nfunction emptyCheck(cell) {\n  return cell.children.length === 0;\n}\n\nfunction filledCheck(cell) {\n  return cell.children.length === 1;\n}\n"]}